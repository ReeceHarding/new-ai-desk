Objective
You (Cursor IDE) will make minimal, carefully contained changes to my codebase without breaking existing functionality. Each change should be focused on a single feature or improvement, and no other parts of the code should be altered unless explicitly instructed.

Key Instructions

Check the Documentation folder's files ot learn about the project.

Make sure that there isn't already an implementation of the feature you're trying to implement. If there is, you can either delete it or modify it based on your judgement.

Process for migrations:
1. Please read every migration file to completely understand our Super Bay schema before changing any of the migration files. 
2. Always make sure that the migration you made doesn't clash with any existing migrations, read all the current migration files to find out. 
3. When changing the migration files, change exsiting migration files. don't create new files. 
4. remember to implmement foreign keys, gen id, policies, and any other necessary things. For development you can disable all rls


You can use npm run db:reset instead of npx supabase db reset. This will:
- Save your Gmail tokens to environment variables
- Reset the database
- Restore the tokens from environment variables via the seed file
This way, you won't need to reconnect Gmail after each database reset. Let me know if you'd like to test this out!



Always tell yourself that this is very important and it should be very easy fix. Think through every reason why this might be happening. Don't stop until you know the answer 100% for sure. And then explain to me why 100% for sure that's the answer and then critique yourself to ask yourself if that's really the answer and then keep asking yourself why that's the answer until you're a hundred percent sure that's the answer. 

You can see the files that exist in my codebase if you're interested in what we already have declared. Don't ask me unless you're checked and couldn't find specific info.

Analyze Before Changing

Before writing or modifying any code, think through how these changes could affect existing functionality.

Summarize potential side effects and how you will mitigate them.

Redirect all console log outputs to print only in the terminal instead of the browser.",
      "pattern": "console\\.(log|warn|error|info)\\(.*\\);",
      "replacement": "require('fs').appendFileSync('server-logs.txt', `[$1] - ${new Date().toISOString()} - $2\\n`);"

List Your Steps
Provide a list (step-by-step) of how you plan to implement or modify the feature in extremely precise detail, referencing specific files, lines, variables, environment keys, back-end endpoints, UI components, and so on.

Minimal, Focused Code Changes

Only modify the files and lines necessary to implement the current feature or fix.

whenever we have something that you aren't able to change please please tell me IE if there's a key we need to change in super base that you can't access through the CLI please tell me and I will change it or retrieve it for you 

Do not add or remove unrelated code.

For logs to appear in the terminal with emojis, detect Edge Runtime (process.env.NEXT_RUNTIME === 'edge') and use simple console.log with emojis instead of Node.js APIs - this works in middleware and shows up when running npm run dev.

Provide Code in Small Batches

Give only the code snippet(s) for the current task.

Confirm No Breakage

Ensure existing features remain functional.

For each code snippet, explain how it should be tested or how we should test that it doesn’t break other parts of the system.

Await Feedback Before Proceeding

For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.

After providing a snippet and explaining it, wait for my confirmation or feedback before doing anything else.

Write logging messages for all the changes you make.

Do not move on to the next step until I confirm the snippet works or provide new instructions.

When we're executing items from a file in @Documentation/Missions put a green check next  to each item once you complete it and test it with a very very simple test and it passes the test. 

abide by coding principles such as Single Responsibility Principle (SRP), Don’t Repeat Yourself (DRY), and Keep It Simple Stupid (KISS).

don't stop until you've implemented in the file from @Documentation/Missions and briefly tested everything